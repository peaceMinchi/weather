<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO"> <!-- 환경설정 -->
    <!-- 로그 경로 변수 선언 -->
    <Properties>
        <property name="LOG_DIR" value="logs" /><!-- 로그발생시간, 우선순위 레벨, 프로세스 ID, 스레드 이름 15칸 고정, 로그 남긴 클래스 이름 40칸 고정, 로그 메시지, 예외 스택 드레이스 있을 경우 -->
        <property name="DEFAULT_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %5p ${sys:PID} --- [%15.15t] %-40.40c{1.} : %m%n%xwEx"/>
    </Properties>

    <Appenders> <!-- 로그 출력 위치, 형식 설정 -->
        <!-- 콘솔 출력 -->
        <Console name="ConsoleAppender" target="SYSTEM_OUT" follow="true">
            <PatternLayout pattern="${DEFAULT_PATTERN}" />
        </Console>

        <!-- 파일 생성 -->
        <RollingFile name="RollingFileAppender">
            <FileName>${LOG_DIR}/weather.log</FileName>
            <FilePattern>${LOG_DIR}/weather.%d{yyyy-MM-dd-hh-mm}.%i.log.gz</FilePattern>
            <PatternLayout pattern="${DEFAULT_PATTERN}" />
            <Policies>
                <!-- 파일 크기가 10MB에 도달하면 새로운 파일을 생성 -->
                <SizeBasedTriggeringPolicy size="10MB"/>
                <!-- 1시간마다 파일을 생성하고, modulate는 로그 파일 생성 시간을 정시에 맞추는 역할 -->
                <TimeBasedTriggeringPolicy interval = "1" modulate = "true"/>
            </Policies>
            <!-- 최대 10개의 로그 파일을 유지하고, 10개를 넘으면 가장 오래된 파일을 삭제 -->
            <DefaultRolloverStrategy max="10" fileIndex="max" />
        </RollingFile>
    </Appenders>

    <Loggers> <!-- 어떤 종류의 로그를 출력할지, 레벨과 로그가 출력될, 위치를 설정 -->
        <!-- Root : 일반적인 로그 정책, 반드시 하나 정의해야함 -->
        <!--
            level 이 INFO 이상인 로그를 Console 에 출력하고 중복된 로그는 남기지 않는다.
            Additivity: 중복된 로그를 출력할지 안할지 설정하는 속성 false 인경우 남기지 않는다.
        -->
        <Root level="INFO" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Root>
        <!-- Spring Framework에서 발생하는 로그만 따로 기록할 수 있음 -->
        <Logger name="org.springframework" level="INFO" additivity="false">
            <AppenderRef ref="ConsoleAppender" />
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>

        <!-- jdbc 관련 logger -->
        <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
        <Logger name="jdbc.sqlonly" level="ERROR" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>
        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
        <Logger name="jdbc.sqltiming" level="INFO" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>
        <!-- SQL 결과 조회된 데이터를 table 형식으로 로그를 남긴다. -->
        <Logger name="jdbc.resultsettable" level="INFO" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>
        <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
        <Logger name="jdbc.audit" level="ERROR" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>
        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
        <Logger name="jdbc.resultset" level="ERROR" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>
        <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
        <Logger name="jdbc.connection" level="WARN" additivity="false">
            <AppenderRef ref="ConsoleAppender"/>
            <AppenderRef ref="RollingFileAppender"/>
        </Logger>
    </Loggers>
</Configuration>